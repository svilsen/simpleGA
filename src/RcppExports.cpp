// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// GACppEigen
Eigen::Vector2d GACppEigen(const int& population_size, const int& bitstring_size, const double& lower, const double& upper, const int& maximum_number_of_iterations, const double& tolerance, const int& seed);
RcppExport SEXP _simpleGA_GACppEigen(SEXP population_sizeSEXP, SEXP bitstring_sizeSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP maximum_number_of_iterationsSEXP, SEXP toleranceSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type population_size(population_sizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type bitstring_size(bitstring_sizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const int& >::type maximum_number_of_iterations(maximum_number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(GACppEigen(population_size, bitstring_size, lower, upper, maximum_number_of_iterations, tolerance, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simpleGA_GACppEigen", (DL_FUNC) &_simpleGA_GACppEigen, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_simpleGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
