% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GA.R
\name{GAR}
\alias{GAR}
\title{GA (R)}
\usage{
GAR(population_size, bitstring_size, lower, upper, maximum_number_of_iterations,
  tolerance, maximum_number_of_iterations_equal, trace = FALSE)
}
\arguments{
\item{population_size}{The size of the population.}

\item{bitstring_size}{The size of the individual.}

\item{lower}{The lower bound of the interval.}

\item{upper}{The upper bound of the interval.}

\item{maximum_number_of_iterations}{The maximum allowed number of interations.}

\item{tolerance}{The convergence tolerance.}

\item{maximum_number_of_iterations_equal}{The number of iterations without changing the fittest individual before forced convergence.}

\item{trace}{TRUE/FALSE: Show trace?}
}
\value{
A list with two elements: the fittest decoded individual found in the entire run and its fitness.
}
\description{
Simple genetic algorithm for maximising function. Implemented using the boost and Eigen libraries.
}
\examples{
###############################################################
############ Simple example using R implementation ############
###############################################################
population_size = 10
bitstring_size = 10

lower = -pi
upper = pi

maximum_number_of_iterations = 10
maximum_number_of_iterations_equal = 3

tolerance = (upper - lower) / (2^bitstring_size - 2)
trace = FALSE

GAR(population_size, bitstring_size, lower, upper,
    maximum_number_of_iterations, tolerance,
    maximum_number_of_iterations_equal, trace)

###############################################################
############# Comparing R and Rcpp implementation #############
###############################################################
library("microbenchmark")

microbenchmark(
    GA_R <- GAR(population_size, bitstring_size, lower, upper,
                maximum_number_of_iterations, tolerance,
                maximum_number_of_iterations_equal, trace),
    GA_Cpp <- GACpp(population_size, bitstring_size, lower, upper,
                    maximum_number_of_iterations, tolerance,
                    maximum_number_of_iterations_equal, trace),
    Optim_R <- optim(runif(1, -pi, pi), negative_fitness, 
                     method = "L-BFGS-B", lower = lower, upper = upper),
    times = 100
)
}
