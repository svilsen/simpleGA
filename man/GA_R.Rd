% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GA.R
\name{GA_R}
\alias{GA_R}
\title{GA (R)}
\usage{
GA_R(population_size, bitstring_size, fitness, lower, upper,
  maximum_number_of_iterations, tolerance, maximum_number_of_iterations_equal,
  trace = FALSE)
}
\arguments{
\item{population_size}{The size of the population.}

\item{bitstring_size}{The size of the individual.}

\item{fitness}{A univariate function to be maximised.}

\item{lower}{The lower bound of the interval.}

\item{upper}{The upper bound of the interval.}

\item{maximum_number_of_iterations}{The maximum allowed number of interations.}

\item{tolerance}{The convergence tolerance.}

\item{maximum_number_of_iterations_equal}{The number of iterations without changing the fittest individual before forced convergence.}

\item{trace}{TRUE/FALSE: Show trace?}
}
\value{
A vector with two elements: the fittest decoded individual found in the entire run and its fitness.
}
\description{
Simple genetic algorithm for maximising function. Implemented using the boost and Eigen libraries.
}
\examples{
###############################################################
############ Simple example using R implementation ############
###############################################################
population_size = 3
bitstring_size = 10

lower = -pi
upper = pi

maximum_number_of_iterations = 10
maximum_number_of_iterations_equal = 3

tolerance = 1e-3
trace = FALSE

f = function(x) x + abs(sin(4L * x))

GA_R(population_size, bitstring_size, 
     f, lower, upper,
     maximum_number_of_iterations, tolerance,
     maximum_number_of_iterations_equal, trace)

###############################################################
############# Comparing R and Rcpp implementation #############
###############################################################
library("microbenchmark")

population_size = 3
bitstring_size = 10

lower = -pi
upper = pi

maximum_number_of_iterations = 10
maximum_number_of_iterations_equal = 3

tolerance = 1e-3
trace = FALSE

f = function(x) x + abs(sin(4L * x))

negative_f = function(x) -x - abs(sin(4L * x))

microbenchmark(
    GAR <- GA_R(population_size, bitstring_size, 
                f, lower, upper,
                maximum_number_of_iterations, tolerance,
                maximum_number_of_iterations_equal, trace),
    GACpp <- GA_Cpp(population_size, bitstring_size, 
                    lower, upper,
                    maximum_number_of_iterations, tolerance,
                    maximum_number_of_iterations_equal, trace),
    GACppwithR <- GA_Cpp_with_R(population_size, bitstring_size, 
                                f, lower, upper,
                                maximum_number_of_iterations, tolerance,
                                maximum_number_of_iterations_equal, trace),
    OptimR <- optim(runif(1, -pi, pi), negative_f, 
                    method = "L-BFGS-B", lower = lower, upper = upper),
    times = 100
)
}
